/*
 * DesktopApplication3View.java
 */
package desktopapplication3;

import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;

/**
 * The application's main frame.
 */
public class DesktopApplication3View extends FrameView {

   Driver driver = new Driver();

   public DesktopApplication3View(SingleFrameApplication app) {
      super(app);

      initComponents();

      // status bar initialization - message timeout, idle icon and busy animation, etc
      ResourceMap resourceMap = getResourceMap();
      int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
      messageTimer = new Timer(messageTimeout, new ActionListener() {

         public void actionPerformed(ActionEvent e) {
            statusMessageLabel.setText("");
         }
      });
      messageTimer.setRepeats(false);
      int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
      for (int i = 0; i < busyIcons.length; i++) {
         busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
      }
      busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

         public void actionPerformed(ActionEvent e) {
            busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
            statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
         }
      });
      idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
      statusAnimationLabel.setIcon(idleIcon);
      progressBar.setVisible(false);

      // connecting action tasks to status bar via TaskMonitor
      TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
      taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            String propertyName = evt.getPropertyName();
            if ("started".equals(propertyName)) {
               if (!busyIconTimer.isRunning()) {
                  statusAnimationLabel.setIcon(busyIcons[0]);
                  busyIconIndex = 0;
                  busyIconTimer.start();
               }
               progressBar.setVisible(true);
               progressBar.setIndeterminate(true);
            } else if ("done".equals(propertyName)) {
               busyIconTimer.stop();
               statusAnimationLabel.setIcon(idleIcon);
               progressBar.setVisible(false);
               progressBar.setValue(0);
            } else if ("message".equals(propertyName)) {
               String text = (String) (evt.getNewValue());
               statusMessageLabel.setText((text == null) ? "" : text);
               messageTimer.restart();
            } else if ("progress".equals(propertyName)) {
               int value = (Integer) (evt.getNewValue());
               progressBar.setVisible(true);
               progressBar.setIndeterminate(false);
               progressBar.setValue(value);
            }
         }
      });
   }

   @Action
   public void showAboutBox() {
      if (aboutBox == null) {
         JFrame mainFrame = DesktopApplication3.getApplication().getMainFrame();
         aboutBox = new DesktopApplication3AboutBox(mainFrame);
         aboutBox.setLocationRelativeTo(mainFrame);
      }
      DesktopApplication3.getApplication().show(aboutBox);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      mainPanel = new javax.swing.JPanel();
      displayPanel = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      resultPane = new javax.swing.JTextPane();
      dropBoxGo = new javax.swing.JButton();
      skyDriveGo = new javax.swing.JButton();
      googleDriveGo = new javax.swing.JButton();
      menuBar = new javax.swing.JMenuBar();
      javax.swing.JMenu fileMenu = new javax.swing.JMenu();
      saveDialog = new javax.swing.JMenuItem();
      javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
      jMenu3 = new javax.swing.JMenu();
      absentMenuItem = new javax.swing.JCheckBoxMenuItem();
      javax.swing.JMenu helpMenu = new javax.swing.JMenu();
      javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
      statusPanel = new javax.swing.JPanel();
      javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
      statusMessageLabel = new javax.swing.JLabel();
      statusAnimationLabel = new javax.swing.JLabel();
      progressBar = new javax.swing.JProgressBar();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      jMenu2 = new javax.swing.JMenu();
      fileChooser = new javax.swing.JFileChooser();

      org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication3.DesktopApplication3.class).getContext().getResourceMap(DesktopApplication3View.class);
      mainPanel.setBackground(resourceMap.getColor("mainPanel.background")); // NOI18N
      mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
      mainPanel.setName("mainPanel"); // NOI18N

      displayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("displayPanel.border.title"))); // NOI18N
      displayPanel.setFont(resourceMap.getFont("displayPanel.font")); // NOI18N
      displayPanel.setName("displayPanel"); // NOI18N

      jScrollPane1.setName("jScrollPane1"); // NOI18N

      resultPane.setEditable(false);
      resultPane.setFont(resourceMap.getFont("resultPane.font")); // NOI18N
      resultPane.setName("resultPane"); // NOI18N
      jScrollPane1.setViewportView(resultPane);

      javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
      displayPanel.setLayout(displayPanelLayout);
      displayPanelLayout.setHorizontalGroup(
         displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
      );
      displayPanelLayout.setVerticalGroup(
         displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
      );

      dropBoxGo.setText(resourceMap.getString("dropBoxGo.text")); // NOI18N
      dropBoxGo.setName("dropBoxGo"); // NOI18N
      dropBoxGo.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            dropBoxGoActionPerformed(evt);
         }
      });

      skyDriveGo.setText(resourceMap.getString("skyDriveGo.text")); // NOI18N
      skyDriveGo.setName("skyDriveGo"); // NOI18N
      skyDriveGo.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            skyDriveGoActionPerformed(evt);
         }
      });

      googleDriveGo.setText(resourceMap.getString("googleDriveGo.text")); // NOI18N
      googleDriveGo.setName("googleDriveGo"); // NOI18N
      googleDriveGo.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            googleDriveGoActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
      mainPanel.setLayout(mainPanelLayout);
      mainPanelLayout.setHorizontalGroup(
         mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(mainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
               .addComponent(displayPanel, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                  .addComponent(dropBoxGo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(64, 64, 64)
                  .addComponent(skyDriveGo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(68, 68, 68)
                  .addComponent(googleDriveGo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(11, Short.MAX_VALUE))
      );
      mainPanelLayout.setVerticalGroup(
         mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
            .addGap(8, 8, 8)
            .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(skyDriveGo)
                  .addComponent(googleDriveGo))
               .addComponent(dropBoxGo))
            .addGap(23, 23, 23))
      );

      menuBar.setName("menuBar"); // NOI18N

      fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
      fileMenu.setName("fileMenu"); // NOI18N

      saveDialog.setText(resourceMap.getString("saveDialog.text")); // NOI18N
      saveDialog.setName("saveDialog"); // NOI18N
      saveDialog.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveDialogActionPerformed(evt);
         }
      });
      fileMenu.add(saveDialog);

      javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(desktopapplication3.DesktopApplication3.class).getContext().getActionMap(DesktopApplication3View.class, this);
      exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
      exitMenuItem.setName("exitMenuItem"); // NOI18N
      fileMenu.add(exitMenuItem);

      menuBar.add(fileMenu);

      jMenu3.setText(resourceMap.getString("jMenu3.text")); // NOI18N
      jMenu3.setName("jMenu3"); // NOI18N
      jMenu3.addMenuListener(new javax.swing.event.MenuListener() {
         public void menuCanceled(javax.swing.event.MenuEvent evt) {
         }
         public void menuDeselected(javax.swing.event.MenuEvent evt) {
         }
         public void menuSelected(javax.swing.event.MenuEvent evt) {
            jMenu3MenuSelected(evt);
         }
      });

      absentMenuItem.setText(resourceMap.getString("absentMenuItem.text")); // NOI18N
      absentMenuItem.setName("absentMenuItem"); // NOI18N
      absentMenuItem.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            absentMenuItemItemStateChanged(evt);
         }
      });
      jMenu3.add(absentMenuItem);

      menuBar.add(jMenu3);

      helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
      helpMenu.setName("helpMenu"); // NOI18N

      aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
      aboutMenuItem.setName("aboutMenuItem"); // NOI18N
      helpMenu.add(aboutMenuItem);

      menuBar.add(helpMenu);

      statusPanel.setName("statusPanel"); // NOI18N

      statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

      statusMessageLabel.setName("statusMessageLabel"); // NOI18N

      statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

      progressBar.setName("progressBar"); // NOI18N

      javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
      statusPanel.setLayout(statusPanelLayout);
      statusPanelLayout.setHorizontalGroup(
         statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
         .addGroup(statusPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(statusMessageLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 437, Short.MAX_VALUE)
            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(statusAnimationLabel)
            .addContainerGap())
      );
      statusPanelLayout.setVerticalGroup(
         statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(statusPanelLayout.createSequentialGroup()
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(statusMessageLabel)
               .addComponent(statusAnimationLabel)
               .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3))
      );

      jMenuBar1.setName("jMenuBar1"); // NOI18N

      jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
      jMenu1.setName("jMenu1"); // NOI18N
      jMenuBar1.add(jMenu1);

      jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
      jMenu2.setName("jMenu2"); // NOI18N
      jMenuBar1.add(jMenu2);

      fileChooser.setCurrentDirectory(new File("C:\\Users\\" + driver.USERNAME + "\\Desktop"));
         fileChooser.setDialogTitle(resourceMap.getString("fileChooser.dialogTitle")); // NOI18N
         fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
         fileChooser.setFileFilter(new MyCustomFilter());
         fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
         fileChooser.setSelectedFile(null);
         fileChooser.setName("fileChooser"); // NOI18N
         fileChooser.setSelectedFiles(null);

         setComponent(mainPanel);
         setMenuBar(menuBar);
         setStatusBar(statusPanel);
      }// </editor-fold>//GEN-END:initComponents

    private void dropBoxGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropBoxGoActionPerformed
       if (driver.dropBoxInstalled) {
          resultPane.setText(driver.findDropBoxData());
       } else {
          resultPane.setText("SkyDrive not detected.");
       }
    }//GEN-LAST:event_dropBoxGoActionPerformed

    private void googleDriveGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_googleDriveGoActionPerformed
       if (driver.googleDriveInstalled && absentMenuItem.isSelected()) {
          resultPane.setText(driver.findAbsentFilesGoogle());
       } else if (driver.googleDriveInstalled && !absentMenuItem.isSelected()) {
          resultPane.setText(driver.findGoogleDriveData());
       } else {
          resultPane.setText("Google Drive not detected.");
       }
}//GEN-LAST:event_googleDriveGoActionPerformed

    private void skyDriveGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skyDriveGoActionPerformed
       if (driver.skyDriveInstalled && absentMenuItem.isSelected()) {
          resultPane.setText(driver.findAbsentFilesSkyDrive());
       } else if (driver.skyDriveInstalled && !absentMenuItem.isSelected()) {
          resultPane.setText(driver.findSkyDriveData());
       } else {
          resultPane.setText("SkyDrive not detected.");
       }
    }//GEN-LAST:event_skyDriveGoActionPerformed

    private void jMenu3MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu3MenuSelected
    }//GEN-LAST:event_jMenu3MenuSelected

    private void absentMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_absentMenuItemItemStateChanged
    }//GEN-LAST:event_absentMenuItemItemStateChanged

    private void saveDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDialogActionPerformed
       int returnVal = fileChooser.showSaveDialog(DesktopApplication3.getApplication().getMainFrame());
       if (returnVal == JFileChooser.APPROVE_OPTION) {
         try {
            File file = new File(fileChooser.getSelectedFile().toString() + ".txt");
            System.out.println(file.toString());
            PrintWriter pw = new PrintWriter(file);
            pw.write("DATA EXTRACTOR REPORT\n\n");
            pw.write("DROPBOX DATA: \n\n");
            pw.write(driver.findDropBoxData() + "\n");
            pw.write("\n//////////////////////////////////////////////////////////////////////////"
                    + "\n\nSKYDRIVE DATA: \n");
            pw.write(driver.findSkyDriveData() + "\n");
            pw.write("--------------------------------------------------------------------------\n");
            pw.write(driver.findAbsentFilesSkyDrive() + "\n\n");
            pw.write("\n//////////////////////////////////////////////////////////////////////////"
                    + "\nGOOGLEDRIVE DATA: \n\n");
            pw.write(driver.findGoogleDriveData() + "\n");
            pw.write(driver.findAbsentFilesGoogle() + "\n");
            pw.close();
         } catch (FileNotFoundException ex) {
            Logger.getLogger(DesktopApplication3View.class.getName()).log(Level.SEVERE, null, ex);
         }
       } else {
          System.out.println("File access cancelled by user.");
       }
    }//GEN-LAST:event_saveDialogActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBoxMenuItem absentMenuItem;
   private javax.swing.JPanel displayPanel;
   private javax.swing.JButton dropBoxGo;
   private javax.swing.JFileChooser fileChooser;
   private javax.swing.JButton googleDriveGo;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenu jMenu3;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JPanel mainPanel;
   private javax.swing.JMenuBar menuBar;
   private javax.swing.JProgressBar progressBar;
   private javax.swing.JTextPane resultPane;
   private javax.swing.JMenuItem saveDialog;
   private javax.swing.JButton skyDriveGo;
   private javax.swing.JLabel statusAnimationLabel;
   private javax.swing.JLabel statusMessageLabel;
   private javax.swing.JPanel statusPanel;
   // End of variables declaration//GEN-END:variables
   private final Timer messageTimer;
   private final Timer busyIconTimer;
   private final Icon idleIcon;
   private final Icon[] busyIcons = new Icon[15];
   private int busyIconIndex = 0;
   private JDialog aboutBox;
}
